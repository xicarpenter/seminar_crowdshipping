from scripts.implementation import test_seed, test_seeds, CrowdshippingModel
import pickle


def compare_3_5(num_crowdshippers: int, 
               num_parcels: int, 
               entrainment_fee: int, 
               of: str = "MAX_PARCELS",
               seed: int = None,
               number_of_seeds: int = 1,
               print_level: int = 0):
    if number_of_seeds == 1:
        if seed is None:
            seeds, model_3_5 = test_seeds(num_crowdshippers, 
                                num_parcels, 
                                entrainment_fee,
                                print_level=print_level,
                                of=of,
                                seed=seed,
                                use_3_5=True,
                                number_of_seeds=number_of_seeds)
            
            seed = seeds[0]
            model_3_5 = model_3_5[0]
            
            model_no_3_5 = test_seed(num_crowdshippers, 
                                num_parcels, 
                                entrainment_fee,
                                print_level=print_level,
                                of=of,
                                seed=seed,
                                use_3_5=False)
            
            print(f"--- Seed: {seed} ---")
            if of == "MAX_PROFIT":
                of_3_5 = model_3_5.calc_max_profit(print_level=0)
                of_no_3_5 = model_no_3_5.calc_max_profit(print_level=0)

                print(f"3.5: {of_3_5}, no 3.5: {of_no_3_5}\n")

            elif of == "MAX_PARCELS":
                of_3_5 = model_3_5.calc_max_parcels()
                of_no_3_5 = model_no_3_5.calc_max_parcels()

                print(f"3.5: {of_3_5}, no 3.5: {of_no_3_5}\n")

            else:
                raise ValueError("of must be MAX_PROFIT or MAX_PARCELS")

        else:
            model_3_5 = test_seed(num_crowdshippers, 
                                num_parcels, 
                                entrainment_fee,
                                print_level=print_level,
                                of=of,
                                seed=seed,
                                use_3_5=True)
            
            model_no_3_5 = test_seed(num_crowdshippers, 
                                num_parcels, 
                                entrainment_fee,
                                print_level=print_level,
                                of=of,
                                seed=seed,
                                use_3_5=False)
            
            with open(f"output/params.pkl", "wb") as f:
                pickle.dump(model_3_5._params, f)
            
            print(f"--- Seed: {seed} ---")
            if of == "MAX_PROFIT":
                of_3_5 = model_3_5.calc_max_profit(print_level=0)
                of_no_3_5 = model_no_3_5.calc_max_profit(print_level=0)

                print()
                print(f"3.5: {of_3_5}, no 3.5: {of_no_3_5}\n")
            
            elif of == "MAX_PARCELS":
                of_3_5 = model_3_5.calc_max_parcels()
                of_no_3_5 = model_no_3_5.calc_max_parcels()

                print(f"3.5: {of_3_5}, no 3.5: {of_no_3_5}\n")

            else:
                raise ValueError("of must be MAX_PROFIT or MAX_PARCELS")    
    
    else:
        used_seeds, models_3_5 = test_seeds(num_crowdshippers, 
                              num_parcels, 
                              entrainment_fee,  
                              print_level=print_level,
                              of=of,
                              number_of_seeds=number_of_seeds,
                              use_3_5=True)
        
        _, models_no_3_5 = test_seeds(num_crowdshippers, 
                              num_parcels, 
                              entrainment_fee,  
                              print_level=print_level,
                              of=of,
                              number_of_seeds=number_of_seeds,
                              use_3_5=False,
                              used_seeds=used_seeds)
        
        for model_3_5, model_no_3_5 in zip(models_3_5, models_no_3_5):
            print(f"--- Seed: {used_seeds[models_3_5.index(model_3_5)]} ---")
            if of == "MAX_PROFIT":
                of_3_5 = model_3_5.calc_max_profit(print_level=0)
                of_no_3_5 = model_no_3_5.calc_max_profit(print_level=0)

                print(f"3.5: {of_3_5}, no 3.5: {of_no_3_5}\n")
            
            elif of == "MAX_PARCELS":
                of_3_5 = model_3_5.calc_max_parcels()
                of_no_3_5 = model_no_3_5.calc_max_parcels()

                print(f"3.5: {of_3_5}, no 3.5: {of_no_3_5}\n")

            else:
                raise ValueError("of must be MAX_PROFIT or MAX_PARCELS")

### DEPRECATED RESTRICTION
# 3.5 Every parcel can only be moved to a single station once
    # self.addConstrs((gp.quicksum(self._X[i, s, j]  
    #                             for (i, s) in self._params.s_is_p.keys() 
    #                             if self._params.s_is_p[i, s] == next_station
    #                             and (i, s, j) in self._X.keys()) <= 1
    #                 for next_station in self._params.S 
    #                 for j in self._params.J), "Constraint_3.5") # if j != "P43" 

'''
% \definecolor{Gray}{gray}{0.9}
% \renewcommand{\arraystretch}{1.5}
% \begin{table}[!ht]  
%     \begin{tabular}{p{3cm} p{13cm}}
%         \Xhline{4\arrayrulewidth}
%         Symbol & \hspace{3cm} Bedeutung \\
%         \hline
%         \rowcolor{Gray}
%          & \hspace{3cm} \textbf{Indizes und Sets} \\
%         \hline
%         $i, j \in \mathcal{I}$ & \hspace{3cm} Stände $\mathcal{I} = \{1, \ldots, I\}$ \\
        
%         \hline 
%         \rowcolor{Gray}
%          & \hspace{3cm} \textbf{Parameter} \\
%         \hline
%         $w_{ic}$ & \hspace{3cm} Standbreite von Stand$_{ic}$ \\ 
        
%         \hline
%         \rowcolor{Gray}
%         & \hspace{3cm} \textbf{Entscheidungsvariablen} \\
%         \hline
%         $X_{ic} \in \mathbb{R}_{0}^{+}$ & \hspace{3cm} X Koordinate von Stand$_{ic}$\\
%         $z_{icjk}^p, z_{icjk}^n \in \mathbb{R}_{0}^{+}$ & \hspace{3cm} $d_{icjk}^x + d_{icjk}^y$, wenn Stand$_{ic}$ und Stand$_{jk}$ ausgewählt sind\\ 
%         & \hspace{3cm} $(hw + hh)$ sonst\\
%         \Xhline{4\arrayrulewidth}
%     \end{tabular} 
%     \caption{Einführung der Notation des mathematischen Modells} 
%     \label{tab:Notation}
% \end{table}

'''